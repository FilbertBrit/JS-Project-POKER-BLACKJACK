/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_multiple_choice_game_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/multiple-choice-game.js */ \"./src/scripts/multiple-choice-game.js\");\n/* harmony import */ var _scripts_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/util */ \"./src/scripts/util.js\");\n\n\n// import GameView from \"./scripts/game-view.js\";\n\nconst startMessage = 'Welcome to Poker Pro! Here you can learn how to play poker. There are three distinct levels but an endless amount of rounds within each level. The goal for each level is to select the strongest hand amoung the player hands. The first level will consist of only 3 different player hands, hands that have only 2 cards. The second level will include a dealers hand, a hand of 3-4 cards, cards that player hands can use to strengthen their hand. Lastly, the final level will include the complete hand of the dealer, 5 cards, cards that player hands can also use to strengthen their hand. Again the goal is select the STRONGEST hand. Good Luck!!!                   READY?!';\nlet answerMessage = ['Correct!', 'Not quite.'];\nlet level = 1;\nlet lost = false;\nlet game;\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  startGame(level);\n  const divStartMessage = document.getElementById(\"start-message\");\n  divStartMessage.innerHTML = startMessage;\n  // const divStartbutton = document.getElementById(\"start-button\")\n  // divStartbutton.innerHTML = ('Click Here To Start');\n\n  // want to do something similar for my music\n  // function toggleMusic(){\n  //     audioButton.onclick = function () {\n  //       audioButton.classList.toggle('active')\n  //       if (audio.paused) {\n  //         document.getElementById(\"play-audio\").src = \"./assets/darkmodeButtons/musicOn.png\"\n  //         audio.play()\n  //       } else {\n  //         document.getElementById(\"play-audio\").src = \"./assets/darkmodeButtons/musicOff.png\"\n  //         audio.pause();\n  //       }\n  //     }\n  // }\n\n  // let game = startGame(level);\n  // while(!lost){\n  //     let result = startGame(++level);\n  //     lost = true;\n  // }\n});\n\n//listener that grabs the hand the user clicks one to check\ndocument.getElementById('players-hands').addEventListener('click', e => {\n  let answer;\n  if (e.target.id.slice(0, e.target.id.length - 1) === 'player-hand') {\n    answer = e.target.id.slice(e.target.id.length - 1);\n    checkAnswer(game, answer);\n  } else if (e.target.parentNode.id.slice(0, e.target.parentNode.id.length - 1) === 'player-hand') {\n    answer = e.target.parentNode.id.slice(e.target.id.length - 1);\n    checkAnswer(game, answer);\n  } else if (e.target.parentNode.parentNode.id.slice(0, e.target.parentNode.parentNode.id.length - 1) === 'player-hand') {\n    answer = e.target.parentNode.parentNode.id.slice(e.target.id.length - 1);\n    checkAnswer(game, answer);\n  }\n});\n\n//code that creates and shows the scoring img div\nconst infoClick = document.getElementById(\"info-button\");\nlet infoVisable = false;\nconst scoringDiv = document.getElementById('scoring');\nconst scoringImg = document.createElement('img');\nconst src = 'images/hand-ranking.png';\nscoringImg.setAttribute('src', src);\nconst infoH3 = document.createElement('h3');\ninfoH3.innerHTML = 'Tap on info icon again to remove scoring sheet.';\ninfoClick.addEventListener('click', e => {\n  // const body = document.getElementById('body')\n  if (!infoVisable) {\n    scoringDiv.append(infoH3);\n    scoringDiv.append(scoringImg);\n    infoVisable = true;\n  } else {\n    infoH3.remove();\n    scoringImg.remove();\n    infoVisable = false;\n  }\n  // body.setAttribute('filter', 'blur')\n});\n\n//checks if the hand the user clicked on is correct, creates new game if correct\nfunction checkAnswer(game, answer) {\n  if (game.winningHand === game.players[answer - 1].hand) {\n    console.log(answerMessage[0]);\n    level++;\n    let div = document.getElementById(\"players-hands\");\n    div.remove();\n    let body = document.getElementById('body');\n    div = document.createElement('div');\n    div.setAttribute('id', 'players-hands');\n    body.append(div);\n    lost = false;\n    startGame(level);\n  } else {\n    console.log(answerMessage[1]);\n    lost = true;\n  }\n}\n\n//will create a game, find the winning hand and output the game onto the app\nfunction startGame(level) {\n  game = new _scripts_multiple_choice_game_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n  let gameResult = game.bestHand(level);\n  game.printGame.call(game);\n  console.log('Game Results', gameResult);\n  let div = document.getElementById(\"players-hands\");\n\n  //for-loop for displaying hands of current game\n  for (let i = 0; i < game.players.length; i++) {\n    let innerDiv = document.createElement('div');\n    innerDiv.setAttribute('id', 'player-hand'.concat(String(i + 1)));\n    // innerDiv.setAttribute(\"style\",\"width:200px\");\n    div.append(innerDiv);\n    let h3 = document.createElement('h3');\n    h3.innerHTML = 'hand '.concat(String(i + 1));\n    innerDiv.append(h3);\n    let nestedDiv = document.createElement('div');\n    nestedDiv.setAttribute('id', 'cards-container');\n    innerDiv.appendChild(nestedDiv);\n    const playerHand = game.players[i].hand;\n    const cardOne = document.createElement('img');\n    const cardTwo = document.createElement('img');\n    const firstCardIdx = _scripts_util__WEBPACK_IMPORTED_MODULE_1__.suits.indexOf(playerHand[0].suit);\n    const secondCardIdx = _scripts_util__WEBPACK_IMPORTED_MODULE_1__.suits.indexOf(playerHand[1].suit);\n    let suitArr = _scripts_util__WEBPACK_IMPORTED_MODULE_1__.cardImgs[firstCardIdx];\n    let cardHash = suitArr.findIndex(el => el.face === playerHand[0].value);\n    let cardImg = _scripts_util__WEBPACK_IMPORTED_MODULE_1__.cardImgs[firstCardIdx][cardHash].img;\n    cardOne.setAttribute('src', cardImg);\n    nestedDiv.appendChild(cardOne);\n    suitArr = _scripts_util__WEBPACK_IMPORTED_MODULE_1__.cardImgs[secondCardIdx];\n    cardHash = suitArr.findIndex(el => el.face === playerHand[1].value);\n    cardImg = _scripts_util__WEBPACK_IMPORTED_MODULE_1__.cardImgs[secondCardIdx][cardHash].img;\n    // console.log(cardImg)\n    cardTwo.setAttribute('src', cardImg);\n    nestedDiv.appendChild(cardTwo);\n  }\n  return gameResult; // return winning card, later [card, tie, game?, idx?]\n}\n// function startGame(){ //will be called if user clicks start button\n\n//     while(!lost){\n//         let game = new multiChoice();\n//         game.printGame.call(game);\n//         let div = document.getElementById(\"players-hands\");\n\n//         for(let i = 0; i < game.players.length; i++){\n//             let innerDiv = document.createElement('div')\n//             innerDiv.setAttribute('id', 'player-hand');\n//             // innerDiv.setAttribute(\"style\",\"width:200px\");\n//             div.append(innerDiv);\n//             let h3 = document.createElement('h3')\n//             h3.innerHTML = ('hand ').concat(String(i+1))\n//             innerDiv.append(h3)\n//             let nestedDiv = document.createElement('div');\n//             nestedDiv.setAttribute('id', 'cards-container')\n//             innerDiv.appendChild(nestedDiv);\n\n//             const playerHand = game.players[i].hand;\n//             const cardOne = document.createElement('img');\n//             const cardTwo = document.createElement('img');\n//             const firstCardIdx = UTIL.suits.indexOf(playerHand[0].suit);\n//             const secondCardIdx = UTIL.suits.indexOf(playerHand[1].suit)\n//             let suitArr = UTIL.cardImgs[firstCardIdx];\n//             let cardHash = (suitArr.findIndex(el => el.face === playerHand[0].value));\n//             let cardImg = UTIL.cardImgs[firstCardIdx][cardHash].img;\n//             cardOne.setAttribute('src', cardImg);\n//             nestedDiv.appendChild(cardOne);\n//             suitArr = UTIL.cardImgs[secondCardIdx];\n//             cardHash = (suitArr.findIndex(el => el.face === playerHand[1].value));\n//             cardImg = UTIL.cardImgs[secondCardIdx][cardHash].img;\n//             console.log(cardImg)\n//             cardTwo.setAttribute('src', cardImg);\n//             nestedDiv.appendChild(cardTwo);\n\n//         }\n//         if(level < 3){\n//             let winner = game.roundOneToTwo.call(game)\n//             console.log('winner card')\n//             console.log(winner)\n//             level++;\n//             if(level === 2) lost = true;    \n//         }\n//     }\n\n// }\n\n// // document.addEventListener(\"DOMContentLoaded\", () => {\n\n// //     const ctx = canvasEl.getContext(\"2d\");\n// //     const game = new multiChoice();\n// //     // new GameView(game, ctx).start();\n// //   });\n// // const canvas = document.getElementById(\"canvas\")\n// // canvas.width = 500;\n// // canvas.height = 500;\n\n// //have a do loop to create new multChoice games/questions, condition: answer must be right\n\n// // let game = new multiChoice();\n// // // game.hands.call(game, 5);\n// // console.log(game);\n// // game.printGame.call(game, 5);\n// // game.dealer.addToHand.call(game.dealer, 1)\n// // // console.log(\"dealer hand\")\n// // // console.log(game.dealer.hand)\n// // console.log('Winner Hand')\n// // console.log(game.bestHand.call(game, 3));\n\n// // startGame();\n\n// ///build a database with possible questions to query for to use during each round\n\n// // createTable(game);\n\n// // function createTable(game){\n//     // const canvas = document.querySelector('#canvas');\n//     // const ctx = canvas.getContext('2d');\n//     // for(let i = 0; i < 1; i++){\n\n//     //     const playerHand = game.players[i].hand\n//     //     const cardOne = document.createElement('img');\n//     //     const firstCardIdx = UTIL.suits.indexOf(playerHand[0].suit);\n//     //     let suitArr = UTIL.cardImgs[firstCardIdx];\n//     //     let cardHash = (suitArr.findIndex(el => el.face === playerHand[0].value));\n//     //     let cardImg = UTIL.cardImgs[firstCardIdx][cardHash].img;\n//     //     console.log(cardImg);\n//     //     cardOne.setAttribute('src', cardImg);\n//     //     cardOne.setAttribute('data-id', 'player'.concat(i+1))\n//     //     // canvas.append(cardOne);\n//     //     // const img = new Image();\n//     //     // img.src = cardImg;\n//     //     // ctx.drawImage(\n//     //     //     cardImg, 0,0\n//     //     // )\n\n//     //     const cardTwo = document.createElement('img');\n//     //     const secondCardIdx = UTIL.suits.indexOf(playerHand[1].suit)\n//     //     suitArr = UTIL.cardImgs[secondCardIdx];\n//     //     cardHash = (suitArr.findIndex(el => el.face === playerHand[1].value));\n//     //     cardImg = UTIL.cardImgs[secondCardIdx][cardHash].img;\n//     //     console.log(cardImg);\n//     //     cardTwo.setAttribute('src', cardImg);\n//     //     cardTwo.setAttribute('data-id', 'player'.concat(i+1))\n\n//     //     console.log(cardOne, 1);\n//     //     console.log(cardTwo, 2);\n//     // }\n// // }\n\n// // function draw(){\n\n// // }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/cards.js":
/*!******************************!*\
  !*** ./src/scripts/cards.js ***!
  \******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deckCreation: function() { return /* binding */ deckCreation; }\n/* harmony export */ });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ \"./src/scripts/util.js\");\n\n//I think im done with this portion, cards have two attributes their suit and number/value\n//I dont think I need any methods for the card class\nclass Card {\n  constructor(suit, value) {\n    this.suit = suit;\n    this.value = value;\n  }\n}\n\n// returning a generated deck of cards\nfunction deckCreation() {\n  //flatten method with map\n  let deck = _util__WEBPACK_IMPORTED_MODULE_0__.suits.flatMap(suit => {\n    return _util__WEBPACK_IMPORTED_MODULE_0__.values.map(value => {\n      // returns an array of cards of a suit paried with each value in values array\n      return new Card(suit, value);\n    });\n  });\n  return deck.sort(() => 0.5 - Math.random()); // shuffling deck array randomly \n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9jYXJkcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE4QjtBQUM5QjtBQUNBO0FBQ0EsTUFBTUMsSUFBSSxDQUFDO0VBQ1BDLFdBQVdBLENBQUNDLElBQUksRUFBRUMsS0FBSyxFQUFDO0lBQ3BCLElBQUksQ0FBQ0QsSUFBSSxHQUFHQSxJQUFJO0lBQ2hCLElBQUksQ0FBQ0MsS0FBSyxHQUFHQSxLQUFLO0VBQ3RCO0FBQ0o7O0FBRUE7QUFDTyxTQUFTQyxZQUFZQSxDQUFBLEVBQUU7RUFDMUI7RUFDQSxJQUFJQyxJQUFJLEdBQUdOLHdDQUFVLENBQUNRLE9BQU8sQ0FBQ0wsSUFBSSxJQUFJO0lBQ2xDLE9BQU9ILHlDQUFXLENBQUNVLEdBQUcsQ0FBQ04sS0FBSyxJQUFJO01BQUU7TUFDOUIsT0FBTyxJQUFJSCxJQUFJLENBQUNFLElBQUksRUFBQ0MsS0FBSyxDQUFDO0lBQy9CLENBQUMsQ0FBQztFQUNOLENBQUMsQ0FBQztFQUVGLE9BQU9FLElBQUksQ0FBQ0ssSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHQyxJQUFJLENBQUNDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQztBQUNoRCIsInNvdXJjZXMiOlsid2VicGFjazovL2pzLXByb2plY3QtcG9rZXItYmxhY2tqYWNrLy4vc3JjL3NjcmlwdHMvY2FyZHMuanM/NDUyMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBVVElMIGZyb20gXCIuL3V0aWxcIlxuLy9JIHRoaW5rIGltIGRvbmUgd2l0aCB0aGlzIHBvcnRpb24sIGNhcmRzIGhhdmUgdHdvIGF0dHJpYnV0ZXMgdGhlaXIgc3VpdCBhbmQgbnVtYmVyL3ZhbHVlXG4vL0kgZG9udCB0aGluayBJIG5lZWQgYW55IG1ldGhvZHMgZm9yIHRoZSBjYXJkIGNsYXNzXG5jbGFzcyBDYXJkIHtcbiAgICBjb25zdHJ1Y3RvcihzdWl0LCB2YWx1ZSl7XG4gICAgICAgIHRoaXMuc3VpdCA9IHN1aXQ7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG59XG5cbi8vIHJldHVybmluZyBhIGdlbmVyYXRlZCBkZWNrIG9mIGNhcmRzXG5leHBvcnQgZnVuY3Rpb24gZGVja0NyZWF0aW9uKCl7XG4gICAgLy9mbGF0dGVuIG1ldGhvZCB3aXRoIG1hcFxuICAgIGxldCBkZWNrID0gVVRJTC5zdWl0cy5mbGF0TWFwKHN1aXQgPT4ge1xuICAgICAgICByZXR1cm4gVVRJTC52YWx1ZXMubWFwKHZhbHVlID0+IHsgLy8gcmV0dXJucyBhbiBhcnJheSBvZiBjYXJkcyBvZiBhIHN1aXQgcGFyaWVkIHdpdGggZWFjaCB2YWx1ZSBpbiB2YWx1ZXMgYXJyYXlcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ2FyZChzdWl0LHZhbHVlKVxuICAgICAgICB9KVxuICAgIH0pIFxuXG4gICAgcmV0dXJuIGRlY2suc29ydCgoKSA9PiAwLjUgLSBNYXRoLnJhbmRvbSgpKSAvLyBzaHVmZmxpbmcgZGVjayBhcnJheSByYW5kb21seSBcbn0iXSwibmFtZXMiOlsiVVRJTCIsIkNhcmQiLCJjb25zdHJ1Y3RvciIsInN1aXQiLCJ2YWx1ZSIsImRlY2tDcmVhdGlvbiIsImRlY2siLCJzdWl0cyIsImZsYXRNYXAiLCJ2YWx1ZXMiLCJtYXAiLCJzb3J0IiwiTWF0aCIsInJhbmRvbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scripts/cards.js\n");

/***/ }),

/***/ "./src/scripts/multiple-choice-game.js":
/*!*********************************************!*\
  !*** ./src/scripts/multiple-choice-game.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ multiChoice; }\n/* harmony export */ });\n/* harmony import */ var _cards__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cards */ \"./src/scripts/cards.js\");\n/* harmony import */ var _player_hand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./player-hand */ \"./src/scripts/player-hand.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util */ \"./src/scripts/util.js\");\n\n\n\nclass multiChoice {\n  constructor() {\n    // this.ctx = canvas.getContext('2d');\n\n    this.deck = (0,_cards__WEBPACK_IMPORTED_MODULE_0__.deckCreation)(); // deck used for multi-choice game\n    this.players = []; //array that will hold all hands of the current game\n    this.hands(3); // adds 3 or 5 players to the game, players array, depending on input\n    this.dealer = new _player_hand__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.deck); // creating dealer hand\n    this.dealer.addToHand.call(this.dealer, 3); // dealer always starts off with 3 cards\n    this.winningHand; // will hold winning hand\n    this.outcome; // will hold a str of desc of winning hand\n  }\n\n  hands(num) {\n    // function for generating the num of players/hands wanted per game\n    for (let i = 0; i < num; i++) {\n      let player = new _player_hand__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.deck); // creating a hand that also has a reference to the game's deck\n      player.addToHand.call(player, 2); //players/hands will only ever have two cards\n      this.players.push(player); //adding each hand to game's players array\n    }\n  }\n\n  printGame() {\n    // prints all cards in the game(dealer + players)\n    console.log(this);\n    console.log(this.dealer.hand);\n    for (let i = 0; i < this.players.length; i++) {\n      console.log(this.players[i].hand);\n    }\n  }\n\n  // need to work on 4-of-kind occurance\n  bestHand(round) {\n    let tie = false;\n    let hand;\n    let currentHand;\n    if (round < 3) {\n      //working!!!\n\n      return this.roundOneToTwo.call(this);\n    } else if (this.dealer.hand.length < 5) {\n      //look for high card, pair, two pair, 3-of-a-kind, 4-of-a-kind\n\n      // console.log('IN ROUNDS 3-4')\n      let handIdx = [0];\n      hand = this.players[0].hand.concat(this.dealer.hand);\n      // console.log('hand');\n      // console.log(hand)\n\n      for (let i = 1; i < this.players.length; i++) {\n        // for(let i = 1; i < 2; i++){ //debugging purposes\n        currentHand = this.players[i].hand.concat(this.dealer.hand);\n        // console.log('current hand')\n        // console.log(currentHand);\n\n        //hashes to count pairs*\n        let handCount = {};\n        let currHandCount = {};\n        for (let i = 0; i < hand.length; i++) {\n          handCount[hand[i].value] ? handCount[hand[i].value].push(hand[i].value) : handCount[hand[i].value] = [hand[i].value];\n          currHandCount[currentHand[i].value] ? currHandCount[currentHand[i].value].push(currentHand[i].value) : currHandCount[currentHand[i].value] = [currentHand[i].value];\n        }\n        // console.log('hashes');\n        // console.log(handCount);\n        // console.log(currHandCount);\n\n        //^^ WORKING\n\n        if (Object.values(handCount).find(ele => ele.length === 4) || Object.values(currHandCount).find(ele => ele.length === 4)) {\n          // at least one player has four of a kind\n\n          let result = this.compareFourOfKind.call(this, hand, handCount, currentHand, currHandCount, handIdx, tie);\n          hand = result[0]; // return hand\n        } else if (Object.values(handCount).find(ele => ele.length === 3) || Object.values(currHandCount).find(ele => ele.length === 3)) {\n          // at least one player has 3 of a kind\n\n          let result = this.compareThreeOfKind.call(this, hand, handCount, currentHand, currHandCount, handIdx, tie);\n          hand = result[0]; // return hand\n        } else if (Object.values(handCount).find(arr => arr.length === 2) || Object.values(currHandCount).find(arr => arr.length === 2)) {\n          let result = this.comparePairs.call(this, hand, handCount, currentHand, currHandCount, handIdx, tie);\n          hand = result[0]; // return hand\n        } else {\n          // last look for highest card, of their 2 cards, WORKING!!!\n          let result = this.compareHandValues(hand, currentHand);\n          if (result == 'tie') {\n            tie = true;\n            handIdx.push(i);\n          } else if (result === currentHand) {\n            tie = false;\n            hand = currentHand;\n            handIdx = [i];\n          }\n        }\n      }\n      return hand.slice(0, 2);\n    } else {\n      //NEED TO WOKR ON THIS!! case: dealer has all 5 cards, now check for flush, straight, etc.\n\n      let result = this.lastRounds.call(this);\n      return result[0];\n    }\n  } //END OF BESTHAND FUNCTION\n\n  //done and working!!\n  roundOneToTwo() {\n    //WORKING!!\n    let tie = false;\n    let hand;\n    let currentHand;\n    hand = this.players[0].hand;\n    for (let i = 1; i < this.players.length; i++) {\n      // for(let i = 1; i < 2; i++){ //debugging purpose \n      currentHand = this.players[i].hand;\n      //booleans checking if any of the two have a pair\n      let handPair = hand[0].value === hand[1].value;\n      let currentHandPair = currentHand[0].value === currentHand[1].value;\n      if (handPair || currentHandPair) {\n        // at least one has a pair\n        if (handPair && currentHandPair) {\n          // if both, checking for highest card\n          if (hand[0].value === currentHand[0].value) {\n            tie = true;\n          } else {\n            hand = _util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(hand[0].value) > _util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(currentHand[0].value) ? hand : currentHand;\n          }\n        } else {\n          hand = handPair ? hand : currentHand;\n        }\n      } else {\n        // no pair, just checking for highest card\n        let result = this.compareHandValues(hand, currentHand);\n        if (result === 'tie') {\n          tie = true;\n        } else if (result === currentHand) {\n          hand = result;\n        }\n      }\n    }\n    // if(tie) console.log(\"tie\")\n    // console.log('in roundOneToTwo')\n    // console.log(hand)\n    this.winningHand = hand;\n    return this;\n    // end of game logic for round 1-2\n  }\n\n  //need to work on this\n  lastRounds() {\n    // check for all possible hands then best, NEED TO WORK ON THIS!\n    let dealerHand = this.dealer.hand;\n    // console.log(dealerHand)\n    let hand = this.players[0].hand.concat(dealerHand);\n    // console.log(this.players[0].hand);\n\n    for (let i = 1; i < this.players.length; i++) {\n      let currentHand = this.players[i].hand.concat(dealerHand);\n      // need logic to check what kind of hand they have;\n    }\n\n    // if(tie) console.log(tie)\n    return hand;\n  }\n\n  //done and working!!\n  compareHandValues(hand1, hand2) {\n    // WORKING!!\n    let hand1Max = _util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(hand1[0].value) > _util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(hand1[1].value) ? _util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(hand1[0].value) : _util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(hand1[1].value);\n    let hand2Max = _util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(hand2[0].value) > _util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(hand2[1].value) ? _util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(hand2[0].value) : _util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(hand2[1].value);\n    let result;\n    if (hand1Max === hand2Max) {\n      if (hand1[0].value === hand2[0].value) {\n        if (_util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(hand1[1].value) < _util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(hand2[1].value)) result = hand2;\n      } else if (hand1[0].value === hand2[1].value) {\n        if (_util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(hand1[1].value) < _util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(hand2[0].value)) result = hand2;\n      } else if (hand1[1].value === hand2[0].value) {\n        if (_util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(hand1[0].value) < _util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(hand2[1].value)) result = hand2;\n      } else if (hand1[1].value === hand2[1].value) {\n        if (_util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(hand1[0].value) < _util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(hand2[0].value)) result = hand2;\n      } else {\n        result = 'tie';\n      }\n    } else if (hand1Max < hand2Max) {\n      result = hand2;\n    }\n    return result;\n  }\n\n  //done, working!!\n  compareThreeOfKind(hand, handCount, currentHand, currHandCount, handIdx, tie) {\n    //done, working?\n    // console.log('in compareThreeOfKind');\n\n    let handThreeOfKind = Object.values(handCount).find(arr => arr.length === 3);\n    let currHandThreeOfKind = Object.values(currHandCount).find(arr => arr.length === 3);\n    if (handThreeOfKind && currHandThreeOfKind) {\n      //check if anyone has another 3-of-kind\n      if (Object.values(handCount).find(ele => ele.length === 3) || Object.values(currHandCount).find(ele => ele.length === 3)) {\n        let handThreeOfKindSecond = Object.values(handCount).find(arr => arr.length === 3 && arr[0] !== handThreeOfKind[0]);\n        let currHandThreeOfKindSecond = Object.values(currHandCount).find(arr => arr.length === 3 && arr[0] !== currHandThreeOfKind[0]);\n        if (handThreeOfKindSecond && currHandThreeOfKindSecond) {\n          let handBestThreeOfKind = _util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(handThreeOfKind[0]) > _util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(handThreeOfKindSecond[0]) ? handThreeOfKind : handThreeOfKindSecond;\n          let currHandBestThreeOfKind = _util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(currHandThreeOfKind[0]) > _util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(currHandThreeOfKindSecond[0]) ? currHandThreeOfKind : currHandThreeOfKindSecond;\n          if (_util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(handBestThreeOfKind[0]) === TIL.values.indexOf(currHandBestThreeOfKind[0])) {\n            tie = true;\n          } else if (_util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(handBestThreeOfKind[0]) < TIL.values.indexOf(currHandBestThreeOfKind[0])) {\n            hand = currentHand;\n            tie = false;\n          }\n        } else {\n          if (currHandCount) {\n            hand = currentHand;\n            tie = false;\n          }\n        }\n      } else if\n        //check if anyone has a pair as well\n      (Object.values(handCount).find(arr => arr.length === 2 && arr[0] !== handThreeOfKind[0]) || Object.values(currHandCount).find(arr => arr.length === 2 && arr[0] !== currHandThreeOfKind[0])) {\n        let handPair = Object.values(handCount).find(arr => arr.length === 2 && arr[0] !== handThreeOfKind[0]);\n        let currHandPair = Object.values(currHandCount).find(arr => arr.length === 2 && arr[0] !== currHandThreeOfKind[0]);\n        if (handPair && currHandPair) {\n          //what if a hand has two pairs\n          //both have 3-of-kind & pair, check if for greatest 3-of-kind\n          if (_util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(handThreeOfKind[0]) === _util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(currHandThreeOfKind[0])) {\n            //save 3-of-kind cards, then check for greatest pair\n            if (_util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(handPair[0]) === _util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(currHandPair[0])) {\n              tie = true;\n            } else if (_util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(handPair[0]) < _util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(currHandPair[0])) {\n              hand = currentHand;\n              tie = false;\n            }\n          } else if (_util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(handThreeOfKind[0]) < _util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(currHandThreeOfKind[0])) {\n            hand = currentHand;\n            tie = false;\n          }\n        } else {\n          //done\n          if (currHandPair) {\n            hand = currHandCount;\n            tie = false;\n          }\n        }\n      } else if (handThreeOfKind[0] === currHandThreeOfKind[0]) {\n        tie = true;\n      } else if (_util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(handThreeOfKind[0]) < _util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(currHandThreeOfKind[0])) {\n        hand = currentHand;\n        // handIdx[0] = i;\n      }\n    } else {\n      //done\n      if (currHandThreeOfKind) {\n        hand = currentHand;\n        // handIdx[0] = i;\n      }\n    }\n\n    return [hand, handIdx, tie];\n  }\n\n  //still need to work on this\n  compareFourOfKind(hand, handCount, currentHand, currHandCount, handIdx, tie) {\n    // console.log('in compareFourOfKind')\n    let handFourOfKind = Object.values(handCount).find(arr => arr.length === 4);\n    let currHandFourOfKind = Object.values(currHandCount).find(arr => arr.length === 4);\n    if (handFourOfKind && currHandFourOfKind) {\n      if (handFourOfKind[0] === currHandFourOfKind[0]) {\n        //check if anyone has a pair as well\n        if (Object.values(handCount).find(arr => arr.length === 2 && arr[0] !== handFourOfKind[0]) || Object.values(currHandCount).find(arr => arr.length === 2 && arr[0] !== currHandFourOfKind[0])) {\n          let handPair = Object.values(handCount).find(arr => arr.length === 2 && arr[0] !== handThreeOfKind[0]);\n          let currHandPair = Object.values(currHandCount).find(arr => arr.length === 2 && arr[0] !== currHandThreeOfKind[0]);\n          if (handPair && currHandPair) {\n            if (handPair[0] === currHandPair[0]) {\n              tie = true;\n            } else {\n              if (currHandPair) {\n                hand = currentHand;\n                tie = false;\n              }\n            }\n          } else {\n            if (currHandPair) {\n              hand = currHandCount;\n              tie = false;\n            }\n          }\n        } else {\n          tie = true;\n          // handIdx.push(i);\n        }\n      } else if (_util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(handThreeOfKind[0]) < _util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(currHandThreeOfKind[0])) {\n        hand = currentHand;\n        // handIdx[0] = i;\n      }\n    } else {\n      if (currHandThreeOfKind) {\n        hand = currentHand;\n        // handIdx[0] = i;\n      }\n    }\n\n    return [hand, handIdx, tie];\n  }\n\n  //done and working!!!\n  comparePairs(hand, handCount, currentHand, currHandCount, handIdx, tie) {\n    // working!!\n    let handPair = Object.values(handCount).find(arr => arr.length === 2);\n    let currHandPair = Object.values(currHandCount).find(arr => arr.length === 2);\n    // console.log(handPair)\n    // console.log(currHandPair)\n\n    //check if pair is amoung only dealer's hand, still need to work on this\n    if (handPair && currHandPair) {\n      // both have a pair\n      // console.log('hi')\n\n      if (Object.values(handCount).find(arr => arr.length === 2 && arr[0] !== handPair[0]) || Object.values(currHandCount).find(arr => arr.length === 2 && arr[0] !== currHandPair[0])) {\n        //atleast one has two pairs, WOKRING!!!\n        //check who has the second pair if not both\n        let secondHandPair = Object.values(handCount).find(arr => arr.length === 2 && arr[0] !== handPair[0]);\n        let secondCurrHandPair = Object.values(currHandCount).find(arr => arr.length === 2 && arr[0] !== currHandPair[0]);\n        // console.log(secondHandPair);\n        // console.log(secondCurrHandPair);\n\n        if (secondHandPair && secondCurrHandPair) {\n          if (secondHandPair[0] === secondCurrHandPair[0]) {\n            tie = true;\n            // handIdx.push(i);\n          } else {\n            if (_util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(secondHandPair[0]) < _util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(secondCurrHandPair[0])) {\n              hand = currentHand;\n              tie = false;\n              // handCount = [i];\n            }\n          }\n        } else {\n          // WORKING!!\n          if (secondCurrHandPair) {\n            hand = currentHand;\n            tie = false;\n            // handIdx = [i];\n          }\n        }\n      } else {\n        // look for the pair with the highest value, WOKRING!!!\n        if (handPair[0] === currHandPair[0]) {\n          tie = true;\n          // handIdx.push(i);\n          // console.log(tie);\n        } else {\n          if (_util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(currHandPair[0]) > _util__WEBPACK_IMPORTED_MODULE_2__.values.indexOf(handPair[0])) {\n            tie = false;\n            hand = currentHand;\n            // handIdx = [i];\n          }\n        }\n      }\n    } else {\n      // check if currHand is the one with the pair, WORKING!!!!\n      // console.log('one pair')\n      if (currHandPair) {\n        tie = false;\n        hand = currentHand;\n        // handIdx = [i];\n      }\n    }\n\n    // console.log('in ComparePairs')\n    // console.log(hand);\n    return [hand, handIdx, tie];\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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V0FBVztjQUNsQkQsR0FBRyxHQUFHLEtBQUs7Y0FDWDtZQUNKO1VBQ0o7UUFFSixDQUFDLE1BQUk7VUFBQztVQUNGLElBQUd1QyxrQkFBa0IsRUFBQztZQUNsQjNDLElBQUksR0FBR0ssV0FBVztZQUNsQkQsR0FBRyxHQUFHLEtBQUs7WUFDWDtVQUNKO1FBQ0o7TUFFSixDQUFDLE1BQUk7UUFBRTtRQUNILElBQUdvQixRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUtlLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBQztVQUMvQm5DLEdBQUcsR0FBRyxJQUFJO1VBQ1Y7VUFDQTtRQUNKLENBQUMsTUFBSTtVQUNELElBQUl0Qix5Q0FBVyxDQUFDNEMsT0FBTyxDQUFDYSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBR3pELHlDQUFXLENBQUM0QyxPQUFPLENBQUNGLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ3pFcEIsR0FBRyxHQUFHLEtBQUs7WUFDWEosSUFBSSxHQUFHSyxXQUFXO1lBQ2xCO1VBQ0o7UUFDSjtNQUVKO0lBQ0osQ0FBQyxNQUFJO01BQUU7TUFDSDtNQUNBLElBQUlrQyxZQUFZLEVBQUM7UUFDYm5DLEdBQUcsR0FBRyxLQUFLO1FBQ1hKLElBQUksR0FBR0ssV0FBVztRQUNsQjtNQUNKO0lBQ0o7O0lBRUE7SUFDQTtJQUNBLE9BQU8sQ0FBQ0wsSUFBSSxFQUFFTyxPQUFPLEVBQUVILEdBQUcsQ0FBQztFQUMvQjtBQUVKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanMtcHJvamVjdC1wb2tlci1ibGFja2phY2svLi9zcmMvc2NyaXB0cy9tdWx0aXBsZS1jaG9pY2UtZ2FtZS5qcz9hOTE1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlY2tDcmVhdGlvbiB9IGZyb20gXCIuL2NhcmRzXCI7XG5pbXBvcnQgUGxheWVySGFuZCBmcm9tIFwiLi9wbGF5ZXItaGFuZFwiO1xuaW1wb3J0ICogYXMgVVRJTCBmcm9tIFwiLi91dGlsXCIgO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBtdWx0aUNob2ljZSB7IFxuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIC8vIHRoaXMuY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cbiAgICAgICAgdGhpcy5kZWNrID0gZGVja0NyZWF0aW9uKCk7IC8vIGRlY2sgdXNlZCBmb3IgbXVsdGktY2hvaWNlIGdhbWVcbiAgICAgICAgdGhpcy5wbGF5ZXJzID0gW107IC8vYXJyYXkgdGhhdCB3aWxsIGhvbGQgYWxsIGhhbmRzIG9mIHRoZSBjdXJyZW50IGdhbWVcbiAgICAgICAgdGhpcy5oYW5kcygzKSAvLyBhZGRzIDMgb3IgNSBwbGF5ZXJzIHRvIHRoZSBnYW1lLCBwbGF5ZXJzIGFycmF5LCBkZXBlbmRpbmcgb24gaW5wdXRcbiAgICAgICAgdGhpcy5kZWFsZXIgPSBuZXcgUGxheWVySGFuZCh0aGlzLmRlY2spOyAvLyBjcmVhdGluZyBkZWFsZXIgaGFuZFxuICAgICAgICB0aGlzLmRlYWxlci5hZGRUb0hhbmQuY2FsbCh0aGlzLmRlYWxlciwgMykgLy8gZGVhbGVyIGFsd2F5cyBzdGFydHMgb2ZmIHdpdGggMyBjYXJkc1xuICAgICAgICB0aGlzLndpbm5pbmdIYW5kOyAvLyB3aWxsIGhvbGQgd2lubmluZyBoYW5kXG4gICAgICAgIHRoaXMub3V0Y29tZTsgLy8gd2lsbCBob2xkIGEgc3RyIG9mIGRlc2Mgb2Ygd2lubmluZyBoYW5kXG4gICAgfVxuXG4gICAgaGFuZHMobnVtKXsgLy8gZnVuY3Rpb24gZm9yIGdlbmVyYXRpbmcgdGhlIG51bSBvZiBwbGF5ZXJzL2hhbmRzIHdhbnRlZCBwZXIgZ2FtZVxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgbnVtOyBpKyspe1xuICAgICAgICAgICAgbGV0IHBsYXllciA9IG5ldyBQbGF5ZXJIYW5kKHRoaXMuZGVjaykgLy8gY3JlYXRpbmcgYSBoYW5kIHRoYXQgYWxzbyBoYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdhbWUncyBkZWNrXG4gICAgICAgICAgICBwbGF5ZXIuYWRkVG9IYW5kLmNhbGwocGxheWVyLCAyKSAvL3BsYXllcnMvaGFuZHMgd2lsbCBvbmx5IGV2ZXIgaGF2ZSB0d28gY2FyZHNcbiAgICAgICAgICAgIHRoaXMucGxheWVycy5wdXNoKHBsYXllcikgLy9hZGRpbmcgZWFjaCBoYW5kIHRvIGdhbWUncyBwbGF5ZXJzIGFycmF5XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcmludEdhbWUoKXsgLy8gcHJpbnRzIGFsbCBjYXJkcyBpbiB0aGUgZ2FtZShkZWFsZXIgKyBwbGF5ZXJzKVxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzKVxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmRlYWxlci5oYW5kKVxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5wbGF5ZXJzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMucGxheWVyc1tpXS5oYW5kKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIG5lZWQgdG8gd29yayBvbiA0LW9mLWtpbmQgb2NjdXJhbmNlXG4gICAgYmVzdEhhbmQocm91bmQpe1xuICAgICAgICBsZXQgdGllID0gZmFsc2U7XG4gICAgICAgIGxldCBoYW5kO1xuICAgICAgICBsZXQgY3VycmVudEhhbmQ7XG5cbiAgICAgICAgaWYocm91bmQgPCAzKXsgLy93b3JraW5nISEhXG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJvdW5kT25lVG9Ud28uY2FsbCh0aGlzKTtcblxuICAgICAgICB9IGVsc2UgaWYodGhpcy5kZWFsZXIuaGFuZC5sZW5ndGggPCA1KXsgLy9sb29rIGZvciBoaWdoIGNhcmQsIHBhaXIsIHR3byBwYWlyLCAzLW9mLWEta2luZCwgNC1vZi1hLWtpbmRcblxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ0lOIFJPVU5EUyAzLTQnKVxuICAgICAgICAgICAgbGV0IGhhbmRJZHggPSBbMF07XG4gICAgICAgICAgICBoYW5kID0gdGhpcy5wbGF5ZXJzWzBdLmhhbmQuY29uY2F0KHRoaXMuZGVhbGVyLmhhbmQpXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnaGFuZCcpO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coaGFuZClcblxuICAgICAgICAgICAgZm9yKGxldCBpID0gMTsgaSA8IHRoaXMucGxheWVycy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAvLyBmb3IobGV0IGkgPSAxOyBpIDwgMjsgaSsrKXsgLy9kZWJ1Z2dpbmcgcHVycG9zZXNcbiAgICAgICAgICAgICAgICBjdXJyZW50SGFuZCA9IHRoaXMucGxheWVyc1tpXS5oYW5kLmNvbmNhdCh0aGlzLmRlYWxlci5oYW5kKVxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdjdXJyZW50IGhhbmQnKVxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGN1cnJlbnRIYW5kKTtcblxuICAgICAgICAgICAgICAgIC8vaGFzaGVzIHRvIGNvdW50IHBhaXJzKlxuICAgICAgICAgICAgICAgIGxldCBoYW5kQ291bnQgPSB7fTtcbiAgICAgICAgICAgICAgICBsZXQgY3VyckhhbmRDb3VudCA9IHt9O1xuICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBoYW5kLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgKGhhbmRDb3VudFtoYW5kW2ldLnZhbHVlXSkgPyBoYW5kQ291bnRbaGFuZFtpXS52YWx1ZV0ucHVzaChoYW5kW2ldLnZhbHVlKSA6IGhhbmRDb3VudFtoYW5kW2ldLnZhbHVlXSA9IFtoYW5kW2ldLnZhbHVlXTtcbiAgICAgICAgICAgICAgICAgICAgKGN1cnJIYW5kQ291bnRbY3VycmVudEhhbmRbaV0udmFsdWVdKSA/IGN1cnJIYW5kQ291bnRbY3VycmVudEhhbmRbaV0udmFsdWVdLnB1c2goY3VycmVudEhhbmRbaV0udmFsdWUpIDogY3VyckhhbmRDb3VudFtjdXJyZW50SGFuZFtpXS52YWx1ZV0gPSBbY3VycmVudEhhbmRbaV0udmFsdWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnaGFzaGVzJyk7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coaGFuZENvdW50KTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhjdXJySGFuZENvdW50KTtcblxuICAgICAgICAgICAgICAgIC8vXl4gV09SS0lOR1xuXG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC52YWx1ZXMoaGFuZENvdW50KS5maW5kKChlbGUpID0+IGVsZS5sZW5ndGggPT09IDQpIHx8IE9iamVjdC52YWx1ZXMoY3VyckhhbmRDb3VudCkuZmluZCgoZWxlKSA9PiBlbGUubGVuZ3RoID09PSA0KSl7IC8vIGF0IGxlYXN0IG9uZSBwbGF5ZXIgaGFzIGZvdXIgb2YgYSBraW5kXG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMuY29tcGFyZUZvdXJPZktpbmQuY2FsbCh0aGlzLCBoYW5kLCBoYW5kQ291bnQsIGN1cnJlbnRIYW5kLCBjdXJySGFuZENvdW50LCBoYW5kSWR4LCB0aWUpO1xuXG4gICAgICAgICAgICAgICAgICAgIGhhbmQgPSByZXN1bHRbMF07IC8vIHJldHVybiBoYW5kXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1lbHNlIGlmIChPYmplY3QudmFsdWVzKGhhbmRDb3VudCkuZmluZCgoZWxlKSA9PiBlbGUubGVuZ3RoID09PSAzKSB8fCBPYmplY3QudmFsdWVzKGN1cnJIYW5kQ291bnQpLmZpbmQoKGVsZSkgPT4gZWxlLmxlbmd0aCA9PT0gMykpeyAvLyBhdCBsZWFzdCBvbmUgcGxheWVyIGhhcyAzIG9mIGEga2luZFxuXG4gICAgICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSB0aGlzLmNvbXBhcmVUaHJlZU9mS2luZC5jYWxsKHRoaXMsIGhhbmQsIGhhbmRDb3VudCwgY3VycmVudEhhbmQsIGN1cnJIYW5kQ291bnQsIGhhbmRJZHgsIHRpZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaGFuZCA9IHJlc3VsdFswXTsgLy8gcmV0dXJuIGhhbmRcblxuICAgICAgICAgICAgICAgIH1lbHNlIGlmIChPYmplY3QudmFsdWVzKGhhbmRDb3VudCkuZmluZCgoYXJyKSA9PiBhcnIubGVuZ3RoID09PSAyKSB8fCBPYmplY3QudmFsdWVzKGN1cnJIYW5kQ291bnQpLmZpbmQoKGFycikgPT4gYXJyLmxlbmd0aCA9PT0gMikpe1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMuY29tcGFyZVBhaXJzLmNhbGwodGhpcywgaGFuZCwgaGFuZENvdW50LCBjdXJyZW50SGFuZCwgY3VyckhhbmRDb3VudCwgaGFuZElkeCwgdGllKTtcbiAgICAgICAgICAgICAgICAgICAgaGFuZCA9IHJlc3VsdFswXTsgLy8gcmV0dXJuIGhhbmRcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfWVsc2V7IC8vIGxhc3QgbG9vayBmb3IgaGlnaGVzdCBjYXJkLCBvZiB0aGVpciAyIGNhcmRzLCBXT1JLSU5HISEhXG4gICAgICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSB0aGlzLmNvbXBhcmVIYW5kVmFsdWVzKGhhbmQsIGN1cnJlbnRIYW5kKTtcblxuICAgICAgICAgICAgICAgICAgICBpZihyZXN1bHQgPT0gJ3RpZScpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGllID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRJZHgucHVzaChpKTtcbiAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYgKHJlc3VsdCA9PT0gY3VycmVudEhhbmQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGllID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kID0gY3VycmVudEhhbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kSWR4ID0gW2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGhhbmQuc2xpY2UoMCwyKTtcbiAgICAgICAgfWVsc2V7IC8vTkVFRCBUTyBXT0tSIE9OIFRISVMhISBjYXNlOiBkZWFsZXIgaGFzIGFsbCA1IGNhcmRzLCBub3cgY2hlY2sgZm9yIGZsdXNoLCBzdHJhaWdodCwgZXRjLlxuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5sYXN0Um91bmRzLmNhbGwodGhpcyk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0WzBdO1xuICAgICAgICAgICAgXG4gICAgICAgIH0gXG4gICAgfS8vRU5EIE9GIEJFU1RIQU5EIEZVTkNUSU9OXG5cbiAgICAvL2RvbmUgYW5kIHdvcmtpbmchIVxuICAgIHJvdW5kT25lVG9Ud28oKXsgLy9XT1JLSU5HISFcbiAgICAgICAgbGV0IHRpZSA9IGZhbHNlO1xuICAgICAgICBsZXQgaGFuZDtcbiAgICAgICAgbGV0IGN1cnJlbnRIYW5kO1xuXG4gICAgICAgIGhhbmQgPSB0aGlzLnBsYXllcnNbMF0uaGFuZDtcbiAgICAgICAgZm9yKGxldCBpID0gMTsgaSA8IHRoaXMucGxheWVycy5sZW5ndGg7IGkrKyl7IFxuICAgICAgICAvLyBmb3IobGV0IGkgPSAxOyBpIDwgMjsgaSsrKXsgLy9kZWJ1Z2dpbmcgcHVycG9zZSBcbiAgICAgICAgICAgIGN1cnJlbnRIYW5kID0gdGhpcy5wbGF5ZXJzW2ldLmhhbmQ7XG4gICAgICAgICAgICAvL2Jvb2xlYW5zIGNoZWNraW5nIGlmIGFueSBvZiB0aGUgdHdvIGhhdmUgYSBwYWlyXG4gICAgICAgICAgICBsZXQgaGFuZFBhaXIgPSBoYW5kWzBdLnZhbHVlID09PSBoYW5kWzFdLnZhbHVlO1xuICAgICAgICAgICAgbGV0IGN1cnJlbnRIYW5kUGFpciA9IGN1cnJlbnRIYW5kWzBdLnZhbHVlID09PSBjdXJyZW50SGFuZFsxXS52YWx1ZTsgXG5cbiAgICAgICAgICAgIGlmKGhhbmRQYWlyIHx8IGN1cnJlbnRIYW5kUGFpcil7IC8vIGF0IGxlYXN0IG9uZSBoYXMgYSBwYWlyXG4gICAgICAgICAgICAgICAgaWYoaGFuZFBhaXIgJiYgY3VycmVudEhhbmRQYWlyKXsgLy8gaWYgYm90aCwgY2hlY2tpbmcgZm9yIGhpZ2hlc3QgY2FyZFxuICAgICAgICAgICAgICAgICAgICBpZihoYW5kWzBdLnZhbHVlID09PSBjdXJyZW50SGFuZFswXS52YWx1ZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmQgPSAoVVRJTC52YWx1ZXMuaW5kZXhPZihoYW5kWzBdLnZhbHVlKSA+IFVUSUwudmFsdWVzLmluZGV4T2YoY3VycmVudEhhbmRbMF0udmFsdWUpID8gaGFuZCA6IGN1cnJlbnRIYW5kKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGhhbmQgPSAoaGFuZFBhaXIgPyBoYW5kIDogY3VycmVudEhhbmQpXG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIH1lbHNleyAvLyBubyBwYWlyLCBqdXN0IGNoZWNraW5nIGZvciBoaWdoZXN0IGNhcmRcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5jb21wYXJlSGFuZFZhbHVlcyhoYW5kLCBjdXJyZW50SGFuZCk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gJ3RpZScpe1xuICAgICAgICAgICAgICAgICAgICB0aWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1lbHNlIGlmIChyZXN1bHQgPT09IGN1cnJlbnRIYW5kKXtcbiAgICAgICAgICAgICAgICAgICAgaGFuZCA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYodGllKSBjb25zb2xlLmxvZyhcInRpZVwiKVxuICAgICAgICAvLyBjb25zb2xlLmxvZygnaW4gcm91bmRPbmVUb1R3bycpXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGhhbmQpXG4gICAgICAgIHRoaXMud2lubmluZ0hhbmQgPSBoYW5kO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgLy8gZW5kIG9mIGdhbWUgbG9naWMgZm9yIHJvdW5kIDEtMlxuICAgIH1cblxuICAgIC8vbmVlZCB0byB3b3JrIG9uIHRoaXNcbiAgICBsYXN0Um91bmRzKCl7IC8vIGNoZWNrIGZvciBhbGwgcG9zc2libGUgaGFuZHMgdGhlbiBiZXN0LCBORUVEIFRPIFdPUksgT04gVEhJUyFcbiAgICAgICAgbGV0IGRlYWxlckhhbmQgPSB0aGlzLmRlYWxlci5oYW5kO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhkZWFsZXJIYW5kKVxuICAgICAgICBsZXQgaGFuZCA9IHRoaXMucGxheWVyc1swXS5oYW5kLmNvbmNhdChkZWFsZXJIYW5kKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5wbGF5ZXJzWzBdLmhhbmQpO1xuXG4gICAgICAgIGZvcihsZXQgaSA9IDE7IGkgPCB0aGlzLnBsYXllcnMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgbGV0IGN1cnJlbnRIYW5kID0gdGhpcy5wbGF5ZXJzW2ldLmhhbmQuY29uY2F0KGRlYWxlckhhbmQpO1xuICAgICAgICAgICAgLy8gbmVlZCBsb2dpYyB0byBjaGVjayB3aGF0IGtpbmQgb2YgaGFuZCB0aGV5IGhhdmU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZih0aWUpIGNvbnNvbGUubG9nKHRpZSlcbiAgICAgICAgcmV0dXJuIGhhbmQ7XG4gICAgfVxuXG4gICAgLy9kb25lIGFuZCB3b3JraW5nISFcbiAgICBjb21wYXJlSGFuZFZhbHVlcyhoYW5kMSwgaGFuZDIpeyAvLyBXT1JLSU5HISFcbiAgICAgICAgbGV0IGhhbmQxTWF4ID0gKFVUSUwudmFsdWVzLmluZGV4T2YoaGFuZDFbMF0udmFsdWUpID4gVVRJTC52YWx1ZXMuaW5kZXhPZihoYW5kMVsxXS52YWx1ZSkpID8gVVRJTC52YWx1ZXMuaW5kZXhPZihoYW5kMVswXS52YWx1ZSkgOiBVVElMLnZhbHVlcy5pbmRleE9mKGhhbmQxWzFdLnZhbHVlKTtcbiAgICAgICAgbGV0IGhhbmQyTWF4ID0gKFVUSUwudmFsdWVzLmluZGV4T2YoaGFuZDJbMF0udmFsdWUpID4gVVRJTC52YWx1ZXMuaW5kZXhPZihoYW5kMlsxXS52YWx1ZSkpID8gVVRJTC52YWx1ZXMuaW5kZXhPZihoYW5kMlswXS52YWx1ZSkgOiBVVElMLnZhbHVlcy5pbmRleE9mKGhhbmQyWzFdLnZhbHVlKTtcblxuICAgICAgICBsZXQgcmVzdWx0O1xuICAgICAgICBpZiAoaGFuZDFNYXggPT09IGhhbmQyTWF4KXtcbiAgICAgICAgICAgIGlmKGhhbmQxWzBdLnZhbHVlPT09aGFuZDJbMF0udmFsdWUpe1xuICAgICAgICAgICAgICAgIGlmKFVUSUwudmFsdWVzLmluZGV4T2YoaGFuZDFbMV0udmFsdWUpIDwgVVRJTC52YWx1ZXMuaW5kZXhPZihoYW5kMlsxXS52YWx1ZSkpIHJlc3VsdCA9IGhhbmQyXG4gICAgICAgICAgICB9ZWxzZSBpZihoYW5kMVswXS52YWx1ZT09PWhhbmQyWzFdLnZhbHVlKXtcbiAgICAgICAgICAgICAgICBpZihVVElMLnZhbHVlcy5pbmRleE9mKGhhbmQxWzFdLnZhbHVlKSA8IFVUSUwudmFsdWVzLmluZGV4T2YoaGFuZDJbMF0udmFsdWUpKSByZXN1bHQgPSBoYW5kMlxuICAgICAgICAgICAgfWVsc2UgaWYoaGFuZDFbMV0udmFsdWUgPT09IGhhbmQyWzBdLnZhbHVlKXtcbiAgICAgICAgICAgICAgICBpZihVVElMLnZhbHVlcy5pbmRleE9mKGhhbmQxWzBdLnZhbHVlKSA8IFVUSUwudmFsdWVzLmluZGV4T2YoaGFuZDJbMV0udmFsdWUpKSByZXN1bHQgPSBoYW5kMlxuICAgICAgICAgICAgfWVsc2UgaWYoaGFuZDFbMV0udmFsdWUgPT09IGhhbmQyWzFdLnZhbHVlKXsgXG4gICAgICAgICAgICAgICAgaWYoVVRJTC52YWx1ZXMuaW5kZXhPZihoYW5kMVswXS52YWx1ZSkgPCBVVElMLnZhbHVlcy5pbmRleE9mKGhhbmQyWzBdLnZhbHVlKSkgcmVzdWx0ID0gaGFuZDJcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9ICd0aWUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9ZWxzZSBpZiAoaGFuZDFNYXggPCBoYW5kMk1heCl7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kMlxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG5cbiAgICAvL2RvbmUsIHdvcmtpbmchIVxuICAgIGNvbXBhcmVUaHJlZU9mS2luZChoYW5kLCBoYW5kQ291bnQsIGN1cnJlbnRIYW5kLCBjdXJySGFuZENvdW50LCBoYW5kSWR4LCB0aWUpeyAvL2RvbmUsIHdvcmtpbmc/XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdpbiBjb21wYXJlVGhyZWVPZktpbmQnKTtcblxuICAgICAgICBsZXQgaGFuZFRocmVlT2ZLaW5kID0gT2JqZWN0LnZhbHVlcyhoYW5kQ291bnQpLmZpbmQoKGFycikgPT4gYXJyLmxlbmd0aCA9PT0gMyk7XG4gICAgICAgIGxldCBjdXJySGFuZFRocmVlT2ZLaW5kID0gT2JqZWN0LnZhbHVlcyhjdXJySGFuZENvdW50KS5maW5kKChhcnIpID0+IGFyci5sZW5ndGggPT09IDMpO1xuICAgICAgICBcbiAgICAgICAgaWYoaGFuZFRocmVlT2ZLaW5kICYmIGN1cnJIYW5kVGhyZWVPZktpbmQpe1xuICAgICAgICAgICAgLy9jaGVjayBpZiBhbnlvbmUgaGFzIGFub3RoZXIgMy1vZi1raW5kXG4gICAgICAgICAgICBpZiAoT2JqZWN0LnZhbHVlcyhoYW5kQ291bnQpLmZpbmQoKGVsZSkgPT4gZWxlLmxlbmd0aCA9PT0gMykgfHwgT2JqZWN0LnZhbHVlcyhjdXJySGFuZENvdW50KS5maW5kKChlbGUpID0+IGVsZS5sZW5ndGggPT09IDMpKXtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGxldCBoYW5kVGhyZWVPZktpbmRTZWNvbmQgPSBPYmplY3QudmFsdWVzKGhhbmRDb3VudCkuZmluZCgoYXJyKSA9PiBhcnIubGVuZ3RoID09PSAzICYmIGFyclswXSAhPT0gaGFuZFRocmVlT2ZLaW5kWzBdKTtcbiAgICAgICAgICAgICAgICBsZXQgY3VyckhhbmRUaHJlZU9mS2luZFNlY29uZCA9IE9iamVjdC52YWx1ZXMoY3VyckhhbmRDb3VudCkuZmluZCgoYXJyKSA9PiBhcnIubGVuZ3RoID09PSAzICYmIGFyclswXSAhPT0gY3VyckhhbmRUaHJlZU9mS2luZFswXSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZihoYW5kVGhyZWVPZktpbmRTZWNvbmQgJiYgY3VyckhhbmRUaHJlZU9mS2luZFNlY29uZCl7XG4gICAgICAgICAgICAgICAgICAgIGxldCBoYW5kQmVzdFRocmVlT2ZLaW5kID0gKFVUSUwudmFsdWVzLmluZGV4T2YoaGFuZFRocmVlT2ZLaW5kWzBdKSA+IFVUSUwudmFsdWVzLmluZGV4T2YoaGFuZFRocmVlT2ZLaW5kU2Vjb25kWzBdKSkgPyBoYW5kVGhyZWVPZktpbmQgOiBoYW5kVGhyZWVPZktpbmRTZWNvbmQ7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJySGFuZEJlc3RUaHJlZU9mS2luZCA9IChVVElMLnZhbHVlcy5pbmRleE9mKGN1cnJIYW5kVGhyZWVPZktpbmRbMF0pID4gVVRJTC52YWx1ZXMuaW5kZXhPZihjdXJySGFuZFRocmVlT2ZLaW5kU2Vjb25kWzBdKSkgPyBjdXJySGFuZFRocmVlT2ZLaW5kIDogY3VyckhhbmRUaHJlZU9mS2luZFNlY29uZDtcblxuICAgICAgICAgICAgICAgICAgICBpZigoVVRJTC52YWx1ZXMuaW5kZXhPZihoYW5kQmVzdFRocmVlT2ZLaW5kWzBdKSA9PT0gVElMLnZhbHVlcy5pbmRleE9mKGN1cnJIYW5kQmVzdFRocmVlT2ZLaW5kWzBdKSkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGllID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYoVVRJTC52YWx1ZXMuaW5kZXhPZihoYW5kQmVzdFRocmVlT2ZLaW5kWzBdKSA8IFRJTC52YWx1ZXMuaW5kZXhPZihjdXJySGFuZEJlc3RUaHJlZU9mS2luZFswXSkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZCA9IGN1cnJlbnRIYW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGllID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgaWYoY3VyckhhbmRDb3VudCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kID0gY3VycmVudEhhbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfWVsc2UgaWZcbiAgICAgICAgICAgIC8vY2hlY2sgaWYgYW55b25lIGhhcyBhIHBhaXIgYXMgd2VsbFxuICAgICAgICAgICAgKE9iamVjdC52YWx1ZXMoaGFuZENvdW50KS5maW5kKChhcnIpID0+IGFyci5sZW5ndGggPT09IDIgJiYgYXJyWzBdICE9PSBoYW5kVGhyZWVPZktpbmRbMF0pIHx8IE9iamVjdC52YWx1ZXMoY3VyckhhbmRDb3VudCkuZmluZCgoYXJyKSA9PiBhcnIubGVuZ3RoID09PSAyICYmIGFyclswXSAhPT0gY3VyckhhbmRUaHJlZU9mS2luZFswXSkpe1xuXG4gICAgICAgICAgICAgICAgbGV0IGhhbmRQYWlyID0gT2JqZWN0LnZhbHVlcyhoYW5kQ291bnQpLmZpbmQoKGFycikgPT4gYXJyLmxlbmd0aCA9PT0gMiAmJiBhcnJbMF0gIT09IGhhbmRUaHJlZU9mS2luZFswXSk7XG4gICAgICAgICAgICAgICAgbGV0IGN1cnJIYW5kUGFpciA9IE9iamVjdC52YWx1ZXMoY3VyckhhbmRDb3VudCkuZmluZCgoYXJyKSA9PiBhcnIubGVuZ3RoID09PSAyICYmIGFyclswXSAhPT0gY3VyckhhbmRUaHJlZU9mS2luZFswXSk7XG5cbiAgICAgICAgICAgICAgICBpZihoYW5kUGFpciAmJiBjdXJySGFuZFBhaXIpe1xuICAgICAgICAgICAgICAgICAgICAvL3doYXQgaWYgYSBoYW5kIGhhcyB0d28gcGFpcnNcbiAgICAgICAgICAgICAgICAgICAgLy9ib3RoIGhhdmUgMy1vZi1raW5kICYgcGFpciwgY2hlY2sgaWYgZm9yIGdyZWF0ZXN0IDMtb2Yta2luZFxuICAgICAgICAgICAgICAgICAgICBpZihVVElMLnZhbHVlcy5pbmRleE9mKGhhbmRUaHJlZU9mS2luZFswXSkgPT09IFVUSUwudmFsdWVzLmluZGV4T2YoY3VyckhhbmRUaHJlZU9mS2luZFswXSkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9zYXZlIDMtb2Yta2luZCBjYXJkcywgdGhlbiBjaGVjayBmb3IgZ3JlYXRlc3QgcGFpclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoVVRJTC52YWx1ZXMuaW5kZXhPZihoYW5kUGFpclswXSkgPT09IFVUSUwudmFsdWVzLmluZGV4T2YoY3VyckhhbmRQYWlyWzBdKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGllID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlIGlmKFVUSUwudmFsdWVzLmluZGV4T2YoaGFuZFBhaXJbMF0pIDwgVVRJTC52YWx1ZXMuaW5kZXhPZihjdXJySGFuZFBhaXJbMF0pKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kID0gY3VycmVudEhhbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGllID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1lbHNlIGlmKFVUSUwudmFsdWVzLmluZGV4T2YoaGFuZFRocmVlT2ZLaW5kWzBdKSA8IFVUSUwudmFsdWVzLmluZGV4T2YoY3VyckhhbmRUaHJlZU9mS2luZFswXSkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZCA9IGN1cnJlbnRIYW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGllID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ZWxzZXsgLy9kb25lXG4gICAgICAgICAgICAgICAgICAgIGlmKGN1cnJIYW5kUGFpcil7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kID0gY3VyckhhbmRDb3VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfWVsc2UgaWYoaGFuZFRocmVlT2ZLaW5kWzBdID09PSBjdXJySGFuZFRocmVlT2ZLaW5kWzBdKXtcbiAgICAgICAgICAgICAgICB0aWUgPSB0cnVlO1xuICAgICAgICAgICAgfWVsc2UgaWYgKFVUSUwudmFsdWVzLmluZGV4T2YoaGFuZFRocmVlT2ZLaW5kWzBdKSA8IFVUSUwudmFsdWVzLmluZGV4T2YoY3VyckhhbmRUaHJlZU9mS2luZFswXSkpe1xuICAgICAgICAgICAgICAgIGhhbmQgPSBjdXJyZW50SGFuZDtcbiAgICAgICAgICAgICAgICAvLyBoYW5kSWR4WzBdID0gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfWVsc2V7Ly9kb25lXG4gICAgICAgICAgICBpZiAoY3VyckhhbmRUaHJlZU9mS2luZCl7XG4gICAgICAgICAgICAgICAgaGFuZCA9IGN1cnJlbnRIYW5kO1xuICAgICAgICAgICAgICAgIC8vIGhhbmRJZHhbMF0gPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFtoYW5kLCBoYW5kSWR4LCB0aWVdO1xuICAgIH1cblxuICAgIC8vc3RpbGwgbmVlZCB0byB3b3JrIG9uIHRoaXNcbiAgICBjb21wYXJlRm91ck9mS2luZChoYW5kLCBoYW5kQ291bnQsIGN1cnJlbnRIYW5kLCBjdXJySGFuZENvdW50LCBoYW5kSWR4LCB0aWUpe1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnaW4gY29tcGFyZUZvdXJPZktpbmQnKVxuICAgICAgICBsZXQgaGFuZEZvdXJPZktpbmQgPSBPYmplY3QudmFsdWVzKGhhbmRDb3VudCkuZmluZCgoYXJyKSA9PiBhcnIubGVuZ3RoID09PSA0KTtcbiAgICAgICAgbGV0IGN1cnJIYW5kRm91ck9mS2luZCA9IE9iamVjdC52YWx1ZXMoY3VyckhhbmRDb3VudCkuZmluZCgoYXJyKSA9PiBhcnIubGVuZ3RoID09PSA0KTtcblxuICAgICAgICBpZihoYW5kRm91ck9mS2luZCAmJiBjdXJySGFuZEZvdXJPZktpbmQpe1xuXG4gICAgICAgICAgICBpZihoYW5kRm91ck9mS2luZFswXSA9PT0gY3VyckhhbmRGb3VyT2ZLaW5kWzBdKXtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vY2hlY2sgaWYgYW55b25lIGhhcyBhIHBhaXIgYXMgd2VsbFxuICAgICAgICAgICAgICAgIGlmKE9iamVjdC52YWx1ZXMoaGFuZENvdW50KS5maW5kKChhcnIpID0+IGFyci5sZW5ndGggPT09IDIgJiYgYXJyWzBdICE9PSBoYW5kRm91ck9mS2luZFswXSkgfHwgT2JqZWN0LnZhbHVlcyhjdXJySGFuZENvdW50KS5maW5kKChhcnIpID0+IGFyci5sZW5ndGggPT09IDIgJiYgYXJyWzBdICE9PSBjdXJySGFuZEZvdXJPZktpbmRbMF0pKXtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgaGFuZFBhaXIgPSBPYmplY3QudmFsdWVzKGhhbmRDb3VudCkuZmluZCgoYXJyKSA9PiBhcnIubGVuZ3RoID09PSAyICYmIGFyclswXSAhPT0gaGFuZFRocmVlT2ZLaW5kWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnJIYW5kUGFpciA9IE9iamVjdC52YWx1ZXMoY3VyckhhbmRDb3VudCkuZmluZCgoYXJyKSA9PiBhcnIubGVuZ3RoID09PSAyICYmIGFyclswXSAhPT0gY3VyckhhbmRUaHJlZU9mS2luZFswXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoaGFuZFBhaXIgJiYgY3VyckhhbmRQYWlyKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGhhbmRQYWlyWzBdID09PSBjdXJySGFuZFBhaXJbMF0pe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjdXJySGFuZFBhaXIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kID0gY3VycmVudEhhbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGllID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGN1cnJIYW5kUGFpcil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZCA9IGN1cnJIYW5kQ291bnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGllID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgdGllID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gaGFuZElkeC5wdXNoKGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1lbHNlIGlmIChVVElMLnZhbHVlcy5pbmRleE9mKGhhbmRUaHJlZU9mS2luZFswXSkgPCBVVElMLnZhbHVlcy5pbmRleE9mKGN1cnJIYW5kVGhyZWVPZktpbmRbMF0pKXtcbiAgICAgICAgICAgICAgICBoYW5kID0gY3VycmVudEhhbmQ7XG4gICAgICAgICAgICAgICAgLy8gaGFuZElkeFswXSA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgaWYgKGN1cnJIYW5kVGhyZWVPZktpbmQpe1xuICAgICAgICAgICAgICAgIGhhbmQgPSBjdXJyZW50SGFuZDtcbiAgICAgICAgICAgICAgICAvLyBoYW5kSWR4WzBdID0gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBbaGFuZCwgaGFuZElkeCwgdGllXVxuICAgIH1cblxuICAgIC8vZG9uZSBhbmQgd29ya2luZyEhIVxuICAgIGNvbXBhcmVQYWlycyhoYW5kLCBoYW5kQ291bnQsIGN1cnJlbnRIYW5kLCBjdXJySGFuZENvdW50LCBoYW5kSWR4LCB0aWUpeyAvLyB3b3JraW5nISFcbiAgICAgICAgbGV0IGhhbmRQYWlyID0gT2JqZWN0LnZhbHVlcyhoYW5kQ291bnQpLmZpbmQoKGFycikgPT4gYXJyLmxlbmd0aCA9PT0gMik7XG4gICAgICAgIGxldCBjdXJySGFuZFBhaXIgPSBPYmplY3QudmFsdWVzKGN1cnJIYW5kQ291bnQpLmZpbmQoKGFycikgPT4gYXJyLmxlbmd0aCA9PT0gMik7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGhhbmRQYWlyKVxuICAgICAgICAvLyBjb25zb2xlLmxvZyhjdXJySGFuZFBhaXIpXG4gICAgICAgIFxuICAgICAgICAvL2NoZWNrIGlmIHBhaXIgaXMgYW1vdW5nIG9ubHkgZGVhbGVyJ3MgaGFuZCwgc3RpbGwgbmVlZCB0byB3b3JrIG9uIHRoaXNcbiAgICAgICAgaWYoaGFuZFBhaXIgJiYgY3VyckhhbmRQYWlyKXsgLy8gYm90aCBoYXZlIGEgcGFpclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2hpJylcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYoT2JqZWN0LnZhbHVlcyhoYW5kQ291bnQpLmZpbmQoKGFycikgPT4gYXJyLmxlbmd0aCA9PT0gMiAmJiBhcnJbMF0gIT09IGhhbmRQYWlyWzBdKSB8fCBPYmplY3QudmFsdWVzKGN1cnJIYW5kQ291bnQpLmZpbmQoKGFycikgPT4gYXJyLmxlbmd0aCA9PT0gMiAmJiBhcnJbMF0gIT09IGN1cnJIYW5kUGFpclswXSkpeyAvL2F0bGVhc3Qgb25lIGhhcyB0d28gcGFpcnMsIFdPS1JJTkchISFcbiAgICAgICAgICAgICAgICAvL2NoZWNrIHdobyBoYXMgdGhlIHNlY29uZCBwYWlyIGlmIG5vdCBib3RoXG4gICAgICAgICAgICAgICAgbGV0IHNlY29uZEhhbmRQYWlyID0gT2JqZWN0LnZhbHVlcyhoYW5kQ291bnQpLmZpbmQoKGFycikgPT4gYXJyLmxlbmd0aCA9PT0gMiAmJiBhcnJbMF0gIT09IGhhbmRQYWlyWzBdKTtcbiAgICAgICAgICAgICAgICBsZXQgc2Vjb25kQ3VyckhhbmRQYWlyID0gT2JqZWN0LnZhbHVlcyhjdXJySGFuZENvdW50KS5maW5kKChhcnIpID0+IGFyci5sZW5ndGggPT09IDIgJiYgYXJyWzBdICE9PSBjdXJySGFuZFBhaXJbMF0pO1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHNlY29uZEhhbmRQYWlyKTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhzZWNvbmRDdXJySGFuZFBhaXIpO1xuXG4gICAgICAgICAgICAgICAgaWYoc2Vjb25kSGFuZFBhaXIgJiYgc2Vjb25kQ3VyckhhbmRQYWlyKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoc2Vjb25kSGFuZFBhaXJbMF0gPT09IHNlY29uZEN1cnJIYW5kUGFpclswXSl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaGFuZElkeC5wdXNoKGkpO1xuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChVVElMLnZhbHVlcy5pbmRleE9mKHNlY29uZEhhbmRQYWlyWzBdKSA8IFVUSUwudmFsdWVzLmluZGV4T2Yoc2Vjb25kQ3VyckhhbmRQYWlyWzBdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmQgPSBjdXJyZW50SGFuZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBoYW5kQ291bnQgPSBbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1lbHNley8vIFdPUktJTkchIVxuICAgICAgICAgICAgICAgICAgICBpZihzZWNvbmRDdXJySGFuZFBhaXIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZCA9IGN1cnJlbnRIYW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGllID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBoYW5kSWR4ID0gW2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9ZWxzZXsgLy8gbG9vayBmb3IgdGhlIHBhaXIgd2l0aCB0aGUgaGlnaGVzdCB2YWx1ZSwgV09LUklORyEhIVxuICAgICAgICAgICAgICAgIGlmKGhhbmRQYWlyWzBdID09PSBjdXJySGFuZFBhaXJbMF0pe1xuICAgICAgICAgICAgICAgICAgICB0aWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAvLyBoYW5kSWR4LnB1c2goaSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHRpZSk7XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGlmKCBVVElMLnZhbHVlcy5pbmRleE9mKGN1cnJIYW5kUGFpclswXSkgPiBVVElMLnZhbHVlcy5pbmRleE9mKGhhbmRQYWlyWzBdKSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGllID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kID0gY3VycmVudEhhbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBoYW5kSWR4ID0gW2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1lbHNleyAvLyBjaGVjayBpZiBjdXJySGFuZCBpcyB0aGUgb25lIHdpdGggdGhlIHBhaXIsIFdPUktJTkchISEhXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnb25lIHBhaXInKVxuICAgICAgICAgICAgaWYgKGN1cnJIYW5kUGFpcil7XG4gICAgICAgICAgICAgICAgdGllID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaGFuZCA9IGN1cnJlbnRIYW5kO1xuICAgICAgICAgICAgICAgIC8vIGhhbmRJZHggPSBbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjb25zb2xlLmxvZygnaW4gQ29tcGFyZVBhaXJzJylcbiAgICAgICAgLy8gY29uc29sZS5sb2coaGFuZCk7XG4gICAgICAgIHJldHVybiBbaGFuZCwgaGFuZElkeCwgdGllXTtcbiAgICB9XG5cbn0iXSwibmFtZXMiOlsiZGVja0NyZWF0aW9uIiwiUGxheWVySGFuZCIsIlVUSUwiLCJtdWx0aUNob2ljZSIsImNvbnN0cnVjdG9yIiwiZGVjayIsInBsYXllcnMiLCJoYW5kcyIsImRlYWxlciIsImFkZFRvSGFuZCIsImNhbGwiLCJ3aW5uaW5nSGFuZCIsIm91dGNvbWUiLCJudW0iLCJpIiwicGxheWVyIiwicHVzaCIsInByaW50R2FtZSIsImNvbnNvbGUiLCJsb2ciLCJoYW5kIiwibGVuZ3RoIiwiYmVzdEhhbmQiLCJyb3VuZCIsInRpZSIsImN1cnJlbnRIYW5kIiwicm91bmRPbmVUb1R3byIsImhhbmRJZHgiLCJjb25jYXQiLCJoYW5kQ291bnQiLCJjdXJySGFuZENvdW50IiwidmFsdWUiLCJPYmplY3QiLCJ2YWx1ZXMiLCJmaW5kIiwiZWxlIiwicmVzdWx0IiwiY29tcGFyZUZvdXJPZktpbmQiLCJjb21wYXJlVGhyZWVPZktpbmQiLCJhcnIiLCJjb21wYXJlUGFpcnMiLCJjb21wYXJlSGFuZFZhbHVlcyIsInNsaWNlIiwibGFzdFJvdW5kcyIsImhhbmRQYWlyIiwiY3VycmVudEhhbmRQYWlyIiwiaW5kZXhPZiIsImRlYWxlckhhbmQiLCJoYW5kMSIsImhhbmQyIiwiaGFuZDFNYXgiLCJoYW5kMk1heCIsImhhbmRUaHJlZU9mS2luZCIsImN1cnJIYW5kVGhyZWVPZktpbmQiLCJoYW5kVGhyZWVPZktpbmRTZWNvbmQiLCJjdXJySGFuZFRocmVlT2ZLaW5kU2Vjb25kIiwiaGFuZEJlc3RUaHJlZU9mS2luZCIsImN1cnJIYW5kQmVzdFRocmVlT2ZLaW5kIiwiVElMIiwiY3VyckhhbmRQYWlyIiwiaGFuZEZvdXJPZktpbmQiLCJjdXJySGFuZEZvdXJPZktpbmQiLCJzZWNvbmRIYW5kUGFpciIsInNlY29uZEN1cnJIYW5kUGFpciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scripts/multiple-choice-game.js\n");

/***/ }),

/***/ "./src/scripts/player-hand.js":
/*!************************************!*\
  !*** ./src/scripts/player-hand.js ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ PlayerHand; }\n/* harmony export */ });\nclass PlayerHand {\n  // fine, dont touch\n  constructor(deck) {\n    this.deck = deck; // reference to the game's card deck\n    this.hand = []; // array that will hold this player's cards\n  }\n\n  addToHand(num) {\n    // maybe add a random way either pop/shift\n    //take a card from deck and add to hand, remove card from deck\n    while (num > 0) {\n      this.hand.push(this.deck.shift());\n      num--;\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9wbGF5ZXItaGFuZC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQ2UsTUFBTUEsVUFBVTtFQUFFO0VBQzdCQyxXQUFXQSxDQUFDQyxJQUFJLEVBQUM7SUFDYixJQUFJLENBQUNBLElBQUksR0FBR0EsSUFBSSxDQUFDLENBQUM7SUFDbEIsSUFBSSxDQUFDQyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUM7RUFDcEI7O0VBR0FDLFNBQVNBLENBQUNDLEdBQUcsRUFBQztJQUFFO0lBQ1o7SUFDQSxPQUFNQSxHQUFHLEdBQUcsQ0FBQyxFQUFDO01BQ1YsSUFBSSxDQUFDRixJQUFJLENBQUNHLElBQUksQ0FBQyxJQUFJLENBQUNKLElBQUksQ0FBQ0ssS0FBSyxDQUFDLENBQUMsQ0FBQztNQUNqQ0YsR0FBRyxFQUFFO0lBQ1Q7RUFDSjtBQUVKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanMtcHJvamVjdC1wb2tlci1ibGFja2phY2svLi9zcmMvc2NyaXB0cy9wbGF5ZXItaGFuZC5qcz9hYjllIl0sInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGxheWVySGFuZHsgLy8gZmluZSwgZG9udCB0b3VjaFxuICAgIGNvbnN0cnVjdG9yKGRlY2spe1xuICAgICAgICB0aGlzLmRlY2sgPSBkZWNrOyAvLyByZWZlcmVuY2UgdG8gdGhlIGdhbWUncyBjYXJkIGRlY2tcbiAgICAgICAgdGhpcy5oYW5kID0gW107IC8vIGFycmF5IHRoYXQgd2lsbCBob2xkIHRoaXMgcGxheWVyJ3MgY2FyZHNcbiAgICB9XG5cblxuICAgIGFkZFRvSGFuZChudW0peyAvLyBtYXliZSBhZGQgYSByYW5kb20gd2F5IGVpdGhlciBwb3Avc2hpZnRcbiAgICAgICAgLy90YWtlIGEgY2FyZCBmcm9tIGRlY2sgYW5kIGFkZCB0byBoYW5kLCByZW1vdmUgY2FyZCBmcm9tIGRlY2tcbiAgICAgICAgd2hpbGUobnVtID4gMCl7XG4gICAgICAgICAgICB0aGlzLmhhbmQucHVzaCh0aGlzLmRlY2suc2hpZnQoKSk7XG4gICAgICAgICAgICBudW0tLTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuIl0sIm5hbWVzIjpbIlBsYXllckhhbmQiLCJjb25zdHJ1Y3RvciIsImRlY2siLCJoYW5kIiwiYWRkVG9IYW5kIiwibnVtIiwicHVzaCIsInNoaWZ0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scripts/player-hand.js\n");

/***/ }),

/***/ "./src/scripts/util.js":
/*!*****************************!*\
  !*** ./src/scripts/util.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cardImgs: function() { return /* binding */ cardImgs; },\n/* harmony export */   questions: function() { return /* binding */ questions; },\n/* harmony export */   rankingHands: function() { return /* binding */ rankingHands; },\n/* harmony export */   suits: function() { return /* binding */ suits; },\n/* harmony export */   values: function() { return /* binding */ values; }\n/* harmony export */ });\n//variables for creation of cards/deck and scoring purposes\nconst suits = ['♣', '♦', '♥', '♠'];\nconst values = ['A', 'K', 'Q', 'J', 10, 9, 8, 7, 6, 5, 4, 3, 2].reverse();\n// export const letterValue = {'A': 14, 'K': 13, 'Q': 12, 'J': 11}\nconst rankingHands = ['high card', 'pair', 'two pairs', 'three of a kind', 'striaght', 'flush', 'full house', 'four of a kind', 'striaght flush', 'royal flush'];\nconst cardImgs = [[{\n  face: 2,\n  img: 'images/2-clover.png'\n}, {\n  face: 3,\n  img: 'images/3-clover.png'\n}, {\n  face: 4,\n  img: 'images/4-clover.png'\n}, {\n  face: 5,\n  img: 'images/5-clover.png'\n}, {\n  face: 6,\n  img: 'images/6-clover.png'\n}, {\n  face: 7,\n  img: 'images/7-clover.png'\n}, {\n  face: 8,\n  img: 'images/8-clover.png'\n}, {\n  face: 9,\n  img: 'images/9-clover.png'\n}, {\n  face: 10,\n  img: 'images/10-clover.png'\n}, {\n  face: 'J',\n  img: 'images/J-clover.png'\n}, {\n  face: 'Q',\n  img: 'images/Q-clover.png'\n}, {\n  face: 'K',\n  img: 'images/K-clover.png'\n}, {\n  face: 'A',\n  img: 'images/A-diamond.png'\n}], [{\n  face: 2,\n  img: 'images/2-diamond.png'\n}, {\n  face: 3,\n  img: 'images/3-diamond.png'\n}, {\n  face: 4,\n  img: 'images/4-diamond.png'\n}, {\n  face: 5,\n  img: 'images/5-diamond.png'\n}, {\n  face: 6,\n  img: 'images/6-diamond.png'\n}, {\n  face: 7,\n  img: 'images/7-diamond.png'\n}, {\n  face: 8,\n  img: 'images/8-diamond.png'\n}, {\n  face: 9,\n  img: 'images/9-diamond.png'\n}, {\n  face: 10,\n  img: 'images/10-diamond.png'\n}, {\n  face: 'J',\n  img: 'images/J-diamond.png'\n}, {\n  face: 'Q',\n  img: 'images/Q-diamond.png'\n}, {\n  face: 'K',\n  img: 'images/K-diamond.png'\n}, {\n  face: 'A',\n  img: 'images/A-diamond.png'\n}], [{\n  face: 2,\n  img: 'images/2-heart.png'\n}, {\n  face: 3,\n  img: 'images/3-heart.png'\n}, {\n  face: 4,\n  img: 'images/4-heart.png'\n}, {\n  face: 5,\n  img: 'images/5-heart.png'\n}, {\n  face: 6,\n  img: 'images/6-heart.png'\n}, {\n  face: 7,\n  img: 'images/7-heart.png'\n}, {\n  face: 8,\n  img: 'images/8-heart.png'\n}, {\n  face: 9,\n  img: 'images/9-heart.png'\n}, {\n  face: 10,\n  img: 'images/10-heart.png'\n}, {\n  face: 'J',\n  img: 'images/J-heart.png'\n}, {\n  face: 'Q',\n  img: 'images/Q-heart.png'\n}, {\n  face: 'K',\n  img: 'images/K-heart.png'\n}, {\n  face: 'A',\n  img: 'images/A-heart.png'\n}], [{\n  face: 2,\n  img: 'images/2-spade.png'\n}, {\n  face: 3,\n  img: 'images/3-spade.png'\n}, {\n  face: 4,\n  img: 'images/4-spade.png'\n}, {\n  face: 5,\n  img: 'images/5-spade.png'\n}, {\n  face: 6,\n  img: 'images/6-spade.png'\n}, {\n  face: 7,\n  img: 'images/7-spade.png'\n}, {\n  face: 8,\n  img: 'images/8-spade.png'\n}, {\n  face: 9,\n  img: 'images/9-clover.png'\n}, {\n  face: 10,\n  img: 'images/10-spade.png'\n}, {\n  face: 'J',\n  img: 'images/J-spade.png'\n}, {\n  face: 'Q',\n  img: 'images/Q-spade.png'\n}, {\n  face: 'K',\n  img: 'images/K-spade.png'\n}, {\n  face: 'A',\n  img: 'images/A-spade.png'\n}]];\nconst questions = [['Which hand is the strognest hand?'], ['Given the dealers hand, which hand now has the strongest hand?'], ['Given that all cards have been dealt, which hand has the strongest hand?']];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/util.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2NzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qcy1wcm9qZWN0LXBva2VyLWJsYWNramFjay8uL3NyYy9pbmRleC5zY3NzPzk3NDUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;